{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"영화정보\", -1 /* HOISTED */)), _createElementVNode(\"div\", null, [_createElementVNode(\"h3\", {\n    class: \"bg-yellow\",\n    style: _normalizeStyle(_ctx.textRed)\n  }, _toDisplayString($data.data[0].title), 5 /* TEXT, STYLE */), _createElementVNode(\"p\", null, \"개봉 : \" + _toDisplayString($data.data[0].year), 1 /* TEXT */), _createElementVNode(\"p\", null, \"장르 : \" + _toDisplayString($data.data[0].category), 1 /* TEXT */)]), _createCommentVNode(\" 반복문 (item : 현재 반복중인 데이터, index : 현재항목의 순서)\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.foods, (item, i) => {\n    return _openBlock(), _createElementBlock(\"p\", {\n      key: i\n    }, _toDisplayString(item), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createElementVNode","class","style","_normalizeStyle","_ctx","textRed","$data","data","title","_toDisplayString","year","category","_createCommentVNode","_renderList","foods","item","i","key"],"sources":["C:\\vue project\\movie-info\\src\\App.vue"],"sourcesContent":["<template>\n  <h1>영화정보</h1>\n  <div>\n    <h3 class=\"bg-yellow\" :style=\"textRed\">{{data[0].title}}</h3>\n    <p>개봉 : {{data[0].year}}</p>\n    <p>장르 : {{data[0].category}}</p>\n  </div>\n  <!-- 반복문 (item : 현재 반복중인 데이터, index : 현재항목의 순서)-->\n  <p v-for=\"(item, i) in foods\" :key=\"i\">{{ item }}</p>\n</template>\n\n<script>\n  export default{\n    name: 'App',\n    // 문자의 표시될 변수 표기기\n    data(){\n      return {\n        data : [\n          {\n            title: \"노량\",\n            year: 2023,\n            category: \"액션, 드라마\",\n            textRed: \"color: red\",\n          },\n          {\n            title: \"아쿠아맨과 로스트 킹덤\",\n            year: 2023,\n            category: \"액션, 판타지, 어드벤처\",\n          }\n        ]\n\n      }\n    }\n  }\n</script>\n\n<style>\n.bg-yellow{\n  background: gold;\n  padding: 10px;\n}\n</style>\n"],"mappings":";;uBAAAA,mBAAA,CAAAC,SAAA,S,0BACEC,mBAAA,CAAa,YAAT,MAAI,sBACRA,mBAAA,CAIM,cAHJA,mBAAA,CAA6D;IAAzDC,KAAK,EAAC,WAAW;IAAEC,KAAK,EAHhCC,eAAA,CAGkCC,IAAA,CAAAC,OAAO;sBAAIC,KAAA,CAAAC,IAAI,IAAIC,KAAK,yBACtDR,mBAAA,CAA4B,WAAzB,OAAK,GAAAS,gBAAA,CAAEH,KAAA,CAAAC,IAAI,IAAIG,IAAI,kBACtBV,mBAAA,CAAgC,WAA7B,OAAK,GAAAS,gBAAA,CAAEH,KAAA,CAAAC,IAAI,IAAII,QAAQ,iB,GAE5BC,mBAAA,+CAAkD,G,kBAClDd,mBAAA,CAAqDC,SAAA,QARvDc,WAAA,CAQyBT,IAAA,CAAAU,KAAK,EAR9B,CAQaC,IAAI,EAAEC,CAAC;yBAAlBlB,mBAAA,CAAqD;MAAtBmB,GAAG,EAAED;IAAC,GAAAP,gBAAA,CAAKM,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}